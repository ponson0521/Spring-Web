package demo.accessingdatamysql;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.ObjectMapper;

import at.favre.lib.crypto.bcrypt.BCrypt;
import io.github.cdimascio.dotenv.Dotenv;

import demo.accessingdatamysql.RequestController.AppObj;

@RestController // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/register") // Map ONLY POST Requests
    public String addNewUser(@RequestBody Map<String, String> params) {
        Dotenv dotenv = Dotenv.load();
        String token = "";

        try {
            HashMap<String, Object> map = new HashMap<>();
            map.put("username", dotenv.get("EXTERNAL_USERNAME"));
            map.put("password", dotenv.get("EXTERNAL_PASSWORD"));
            map.put("accountType", "2");
            ObjectMapper mapper = new ObjectMapper();
            String json = mapper.writeValueAsString(map);
            token = RequestController.sendPOST(
                    "http://frs.cgib-lpr.com.tw:8080/GUNS/mgr/login", json, "");
        } catch (Exception err) {
            System.out.println(err);
        }

        try {
            HashMap<String, Object> map = new HashMap<>();
            map.put("appName", params.get("account"));
            map.put("accountType", "2");
            map.put("appOwner", "");
            map.put("desc", params.get("account"));
            map.put("operatePerson", "1666379539836874753");
            map.put("privilege", "0");
            ObjectMapper mapper = new ObjectMapper();
            String json = mapper.writeValueAsString(map);
            String register = RequestController.sendPOST(
                    "http://frs.cgib-lpr.com.tw:8080/GUNS/callerAccount/create",
                    json, token);
        } catch (Exception err) {
            System.out.println(err);
        }

        List<AppObj> externalAccount = new ArrayList<AppObj>();
        try {
            HashMap<String, Object> map = new HashMap<>();
            map.put("appName", params.get("account"));
            map.put("current", 1);
            map.put("size", 10);
            map.put("accountType", "2");
            ObjectMapper mapper = new ObjectMapper();
            String json = mapper.writeValueAsString(map);
            externalAccount = RequestController.sendPOST2(
                    "http://frs.cgib-lpr.com.tw:8080/GUNS/callerAccount/getList",
                    json, token);
        } catch (Exception err) {
            System.out.println(err);
        }

        String password = params.get("password");
        String hashPwd = BCrypt.withDefaults().hashToString(12, password.toCharArray());
        User n = new User();
        n.setAccount(params.get("account"));
        n.setPwd(hashPwd);
        n.setName(params.get("name"));
        n.setSex(params.get("sex"));
        n.setEmail(params.get("email"));
        n.setPhone(params.get("phone"));
        n.setExtAccount(params.get("account"));
        n.setExtPwd(externalAccount.get(0).appSecret);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping(path = "/auth")
    public Object handleLogin(@RequestBody Map<String, String> params) {
        String account = params.get("account");
        String pwd = params.get("pwd");
        if (account == null || pwd == null) {
            return "Account and password are required";
        }
        User user = userRepository.findUserByAccount(account);
        if (user == null) {
            return "Account does not exsist";
        }
        BCrypt.Result result = BCrypt.verifyer().verify(pwd.toCharArray(), user.getPwd());
        if (result.verified) {
            HashMap<String, String> map = new HashMap<>();
            map.put("extAccount", user.getExtAccount());
            map.put("extPwd", user.getExtPwd());
            return map;
        } else {
            return "Wrong password";
        }
    }

    @GetMapping(path = "/all")
    public Iterable<User> getAllUsers() {

        return userRepository.findAll();
    }

    @GetMapping(path = "/user")
    public User getUser(@RequestParam(value = "account") String account) {
        // @RequestParam means it is a parameter from the GET or POST request

        return userRepository.findUserByAccount(account);
    }

    @PostMapping(path = "/update")
    public String updateUser(@RequestBody Map<String, String> params) {
        try {
            userRepository.updateProfileById(params.get("name"), params.get("sex"), params.get("email"),
                    params.get("phone"), Integer.valueOf(params.get("id")));
            return "Success";
        } catch (Exception err) {
            System.out.println(err);
            return "Failed";
        }

    }

    @PostMapping(path = "/delete")
    public String deleteUser(@RequestBody Map<String, String> params) {
        try {
            userRepository.deleteUserById(Integer.valueOf(params.get("id")));
            return "Success";
        } catch (Exception err) {
            System.out.println(err);
            return "Failed";
        }
    }

    @PostMapping(path = "/changepwd")
    public String changePwd(@RequestBody Map<String, String> params) {
        try {
            User user = userRepository.findUserByAccount(params.get("account"));
            BCrypt.Result result = BCrypt.verifyer().verify(params.get("oldPwd").toCharArray(),
                    user.getPwd());
            if (result.verified) {
                String newPwd = params.get("newPwd");
                String hashPwd = BCrypt.withDefaults().hashToString(12, newPwd.toCharArray());
                user.setPwd(hashPwd);
                userRepository.save(user);
                return "Success";
            } else {
                return "Password verification failed";
            }

        } catch (Exception err) {
            System.out.println(err);
            return "Failed";
        }
    }
}